import os
import sqlite3
from flask import Flask, request, escape, render_template_string

app = Flask(__name__)

# Command Injection Vulnerability
def command_injection():
    command = input("Enter a shell command to run: ")
    os.system(command)  # Vulnerable to command injection

# Insecure File Handling Vulnerability
def insecure_file_handling():
    filename = input("Enter a filename to read: ")
    try:
        with open(filename, 'r') as file:  # No validation of user input
            print(file.read())
    except Exception as e:
        print(f"Error reading file: {e}")

# SQL Injection Vulnerability
def sql_injection():
    connection = sqlite3.connect('vulnerable.db')
    cursor = connection.cursor()

    user_input = input("Enter your username to fetch details: ")
    # Vulnerable SQL query
    query = f"SELECT * FROM users WHERE username = '{user_input}';"
    cursor.execute(query)
    results = cursor.fetchall()

    for row in results:
        print(row)

    connection.close()

# Cross-Site Scripting (XSS) Vulnerability
@app.route('/greet', methods=['GET'])
def greet_user():
    user_name = request.args.get('name', '')
    # Vulnerable to XSS as it directly includes user input in HTML
    return render_template_string(f"<h1>Hello, {user_name}!</h1>")

# Main function to demonstrate vulnerabilities
def main():
    print("1. Command Injection")
    print("2. Insecure File Handling")
    print("3. SQL Injection")
    print("4. Cross-Site Scripting (XSS) - Visit /greet?name=<your_name>")
    
    choice = input("Choose an option (1/2/3/4): ")
    
    if choice == '1':
        command_injection()
    elif choice == '2':
        insecure_file_handling()
    elif choice == '3':
        sql_injection()
    elif choice == '4':
        app.run(debug=True)  # Start Flask app for XSS demo
    else:
        print("Invalid choice!")

if __name__ == "__main__":
    main()
